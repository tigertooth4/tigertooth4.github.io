<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Coding on 思｜制 - A man&#39;s thinking and making</title>
    <link>http://tigertooth4.github.io/tags/coding/</link>
    <description>Recent content in Coding on 思｜制 - A man&#39;s thinking and making</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 30 Jul 2014 19:21:00 +0000</lastBuildDate><atom:link href="http://tigertooth4.github.io/tags/coding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>斜洛朗级数环的软件包 和 FriCAS</title>
      <link>http://tigertooth4.github.io/post/math/oresus-and-fricas/</link>
      <pubDate>Wed, 30 Jul 2014 19:21:00 +0000</pubDate>
      
      <guid>http://tigertooth4.github.io/post/math/oresus-and-fricas/</guid>
      <description>这几天都在忙着写 ORESUS 软件包的一些例子。总算要实现我 4 年（甚至更早以前）的愿望了！那时候和ex游完泳等她的时候就在写 ORESUS 的代码。。。 好吧！现在大家</description>
    </item>
    
    <item>
      <title>斜洛朗级数环的软件包现在可以计算一个算子的分数次方了！</title>
      <link>http://tigertooth4.github.io/post/math/oresus-now-understand-fractional-powers/</link>
      <pubDate>Sat, 26 Jul 2014 18:00:00 +0000</pubDate>
      
      <guid>http://tigertooth4.github.io/post/math/oresus-now-understand-fractional-powers/</guid>
      <description>先上张代码的图吧！FriCAS 虽然是从 AXIOM 这门古董级语言中 fork 出来的一个分支，目前仍处在活跃开发期，但是很多功能仍然缺失，尤其是：调试的功能基！</description>
    </item>
    
    <item>
      <title>Calculate PDOs using AXIOM / FriCAS</title>
      <link>http://tigertooth4.github.io/post/coding/calculate-pdos-by-using-axiom/fricas/</link>
      <pubDate>Thu, 03 May 2012 00:46:30 +0000</pubDate>
      
      <guid>http://tigertooth4.github.io/post/coding/calculate-pdos-by-using-axiom/fricas/</guid>
      <description>For years, the computation of Lax equations is a tedious and time-consuming task. For example, KdV equation has the following type of Lax equation: ```mathjax L_t = [A, L], ``` where ```mathjax L=\partial^2+u(x,t)```, (A=\partial^3+4u(x,t)\partial+2u_x). Having been a graduate student majoring in integrable systems for years, I always had to work on such kind of computations. It was frustrating. At that time, I was thinking of a way to speed up the computation with the power of computers.</description>
    </item>
    
  </channel>
</rss>
